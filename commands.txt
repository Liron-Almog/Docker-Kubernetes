--Chapter 1

docker build . = builds the image the Docker file.
docker images --all = show all the images
docker run -p 3000:3000 $imageId (run the timage and expose the port 3000 to out side from a container)
docker ps = list all running containers 
docker stop $ContainerName  = stop the container

--Chapter 2
docker ps -a = show all the containers.
docker ps = all the container that running
docker run -it node = expose an interactive session from indside the container to our hosting machine 
docker build . = bulid a new custom image base on dockerfile
docker run -p 3000:80 #id  = 3000 is tell to docker should be accessible (if add -d this will run in dettached modedo)
docker --help = show all the commands
docker ps --help = show all the available config option for docker ps
docker run = create new container on base image and (run in attached mode)
docker start = not block the terminal and we can't to interact with this container (run in detached mode)
docker attach $ContainerName = to attach to container (trhen we will see the log)
docker logs $ContainerName = see all the past logs and not stay in attaed mode 
docker logs -f $ContainerName = see all the past logs and stay in attached mode 
docker run -it $DcokerId = to enable to interacte and expost terminal of in container 
docker rm $ContainerId = delete contaier (if the container works you will cant to delete him)
docker rmi $ImagesId = delete the image ( if the image contains in the container so you will not to ebaled to delete it)
docker image prune = this will remove all images that unuse 
docker image inspect $ContainerId = infromation about image
docker cp $nameContinaer:folderInCointainer sourceInLocaly = from container to local 
docker cp sourceInLocaly $nameContinaer:folderInCointainer = from local to container 
docker build -t name:tag . = create tag and repository to image 
docker run -it $DcokerId name --name TheimageOfContainerThatIWant $imageName $= to enable to interacte and expost terminal of in container and create name to container 
docker tag oldName NewName = Change the name of the image (we create clone from the new image)
docker login = login to dockerhub
docker logout 
docker push $ImageName = push to dockerHub

--Chapter 3
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback ImageName = to create name volume
In Docker file this VOLUME ["/APP/NODE_MODULES"] == docker run -v /app/NODE_MODULES (annonymus volume)
docker run -d --rm -p 3000:80 --name feedback-app 
                            -v $ValumeName:$PathInProject this what i want to save //this is the ValumeName
docker run -d --rm -p 3000:80 --name feedback-app 
                            -v $ValumeName:$PathInProject -v "The path of all project" //this is  BindMounts !!!

docker run -d --rm -p 3000:80 --name feedback-app 
                            -v $ValumeName:$PathInProject -v "The path of all project:ro" //I restrict the bindMounts only to read !!!
docker volume inspect $VolumeName = information about that volume 
docker run feedback-app  --env-file = envrioment file
docker run feedback-app -enc PORT=8000 = send envrioment vars
docker run feedback-app -e PORT=8000



Chapter-4 
docker container inspect $ContainerName  = Show detail about that container
docker network create  $ContainerNetworkName 
docker run --newwork $TheNameOfNetWorkThatIcreated $ImageName= connection the docker to new of cointaer network


Chapter-6

docker-compose up  -d = for building and pulling all the images 
docker-compose down = delete all container and the default networ it created 
docker-compose down -v= delete all container and the default networ it created  and volumes
docker-compose up --build = for building and force to build all the images
docker-compose build = build the images but not run the containers